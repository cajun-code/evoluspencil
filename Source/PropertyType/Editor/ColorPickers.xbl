<?xml version="1.0"?>
<!DOCTYPE bindings SYSTEM "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" [
  <!ENTITY % pencilDTD SYSTEM "chrome://pencil/locale/pencil.dtd">
  %pencilDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:p="http://www.evolus.vn/Namespace/Pencil">
    <binding id="wheelColorPicker">
        <implementation>
            <constructor>
            <![CDATA[
                try {
                    this.wheelImage = document.getAnonymousElementByAttribute(this, "aid", "wheelImage");
                    this.pin = document.getAnonymousElementByAttribute(this, "aid", "pin");
                    this.hue = document.getAnonymousElementByAttribute(this, "aid", "hue");
                    this.sat = document.getAnonymousElementByAttribute(this, "aid", "sat");
                    this.brightScale = document.getAnonymousElementByAttribute(this, "aid", "brightScale");
                    this.bright = document.getAnonymousElementByAttribute(this, "aid", "bright");
                    this.clearSatButton = document.getAnonymousElementByAttribute(this, "aid", "clearSatButton");

                    //get the radius
                    this.radius = this.wheelImage.width / 2;
                    this.pinHeld = false;

                    var thiz = this;
                    //register the event handler
                    this.pin.addEventListener("mousedown", function (event) {
                        thiz._handlePinMouseDown(event);
                    }, false);

                    this._mouseMoveFunction = function (event) {
                        if (!thiz._handleMouseMove) {
                            document.removeEventListener("mousemove", arguments.callee, false);
                            return;
                        }
                        thiz._handleMouseMove(event);
                    };
                    this.ownerDocument.addEventListener("mousemove", this._mouseMoveFunction, false);

                    this._mouseUpFunction = function (event) {
                        if (!thiz._handleMouseUp) {
                            document.removeEventListener("mouseup", arguments.callee, false);
                            return;
                        }
                        thiz._handleMouseUp(event);
                    };
                    this.ownerDocument.addEventListener("mouseup", this._mouseUpFunction, false);

                    this.brightScale.addEventListener("change", function(event) {
                        thiz.bright.value = thiz.brightScale.value;
                        thiz._disableEventFiringOnce = false;
                    }, false);
                    this.brightScale.addEventListener("mouseup", function(event) {
                        thiz._emitChangeEvent();
                    }, false);

                    this.bright.addEventListener("change", function(event) {
                        thiz.brightScale.value = thiz.bright.value;
                        thiz._emitChangeEvent();
                    }, false);

                    this.hue.addEventListener("change", function(event) {
                        thiz._handleHueSatNumberChange(true);
                    }, false);
                    this.sat.addEventListener("change", function(event) {
                        thiz._handleHueSatNumberChange(true);
                    }, false);
                    this.wheelImage.addEventListener("mousedown", function(event) {
                        if (thiz.getAttribute("disabled")) return;
                        var x = event.screenX - thiz.wheelImage.boxObject.screenX;
                        var y = event.screenY - thiz.wheelImage.boxObject.screenY;

                        var r = Math.sqrt((thiz.radius - x) * (thiz.radius - x) + (thiz.radius - y) * (thiz.radius - y));

                        if (r > thiz.radius) {
                            return;
                        }

                        thiz.pin.setAttribute("left", x);
                        thiz.pin.setAttribute("top", y);

                        var h = Math.round(Math.atan2(thiz.radius - y, x - thiz.radius) * 180 / Math.PI);
                        h = (h + 360) % 360;

                        var s = Math.round(r * 100 / thiz.radius);

                        thiz._changHS(h, s);

                        thiz._handlePinMouseDown(event);
                    }, false);
                    this.clearSatButton.addEventListener("command", function(event) {
                        thiz.sat.value = 0;
                        thiz._handleHueSatNumberChange(true);
                    }, false)

                    if (this.hasAttribute("color")) {
                        this.setColor(Color.fromString(this.getAttribute("color")));
                    } else {
                        this.setColor(new Color());
                    }
                } catch (e) {
                    alert("error in color picker: " + e);
                }

            ]]>
            </constructor>
            <destructor action="alert(0); try { this.ownerDocument.removeEventListener('mousemove', this._mouseMoveFunction, false); this.ownerDocument.removeEventListener('mouseup', this._mouseUpFunction, false); } catch (e) { alert(e); }" />
            <method name="_handlePinMouseDown">
                <parameter name="event"/>
                <body>
                <![CDATA[
                    if (this.getAttribute("disabled")) return;
                    this.pinHeld = true;
                    this.ox = event.clientX;
                    this.oy = event.clientY;

                    this.pinOX = parseInt(this.pin.left, 10);
                    this.pinOY = parseInt(this.pin.top, 10);
                ]]>
                </body>
            </method>
            <method name="_handleMouseMove">
                <parameter name="event"/>
                <body>
                <![CDATA[
                    if (!this.pinHeld) return;

                    event.preventDefault();

                    var dx = event.clientX - this.ox;
                    var dy = event.clientY - this.oy;

                    var x = this.pinOX;
                    var y = this.pinOY;

                    x += dx;
                    y += dy;

                    var r = Math.sqrt((this.radius - x) * (this.radius - x) + (this.radius - y) * (this.radius - y));

                    if (r > this.radius) {
                        x = Math.round(this.radius * (r - this.radius + x) / r);
                        y = Math.round(this.radius * (r - this.radius + y) / r);

                        r = this.radius;
                    }

                    this.pin.setAttribute("left", x);
                    this.pin.setAttribute("top", y);

                    var h = Math.round(Math.atan2(this.radius - y, x - this.radius) * 180 / Math.PI);
                    h = (h + 360) % 360;

                    var s = Math.round(r * 100 / this.radius);

                    this._changHS(h, s);
                ]]>
                </body>
            </method>
            <method name="_handleMouseUp">
                <parameter name="event"/>
                <body>
                <![CDATA[
                    this.pinHeld = false;
                ]]>
                </body>
            </method>
            <method name="_handleHueSatNumberChange">
                <parameter name="fireEvent"/>
                <body>
                <![CDATA[
                    //repositioning pin
                    var h = this.hue.value;
                    var s = this.sat.value;
                    var a = (h <= 180 ? h : h - 360) * Math.PI / 180;

                    var x = this.radius + Math.round(this.radius * (s / 100) * Math.cos(a));
                    var y = this.radius - Math.round(this.radius * (s / 100) * Math.sin(a));

                    this.pin.setAttribute("left", x);
                    this.pin.setAttribute("top", y);

                    if (fireEvent) this._emitChangeEvent();
                ]]>
                </body>
            </method>
            <method name="_emitChangeEvent">
                <body>
                <![CDATA[
                    if (this._disableEventFiringOnce) {
                        this._disableEventFiringOnce = false;
                        return;
                    }
                    var event = document.createEvent("Events");
                    event.initEvent("ValueChange", false, false);
                    this.dispatchEvent(event);
                ]]>
                </body>
            </method>
            <method name="_changHS">
                <parameter name="hue"/>
                <parameter name="sat"/>
                <body>
                <![CDATA[
                    this.hue.value = hue;
                    this.sat.value = sat;
                    this._emitChangeEvent();
                ]]>
                </body>
            </method>
            <method name="setColor">
                <parameter name="color"/>
                <body>
                <![CDATA[
                    this._disableEventFiringOnce = true;
                    var hsv = color.getHSV();
                    this.hue.value = hsv.hue;
                    this.sat.value = hsv.saturation;
                    this.bright.value = hsv.value;

                    this._handleHueSatNumberChange(); //do not fire the change event
                    this.brightScale.setAttribute("value", this.bright.value);
                ]]>
                </body>
            </method>
            <method name="getColor">
                <body>
                <![CDATA[
                    return Color.fromHSV(parseInt(this.hue.value, 10),
                                         parseInt(this.sat.value, 10),
                                         parseInt(this.bright.value, 10));
                ]]>
                </body>
            </method>
            <method name="isModified">
                <body>
                <![CDATA[
                    return this.isUserModified;
                ]]>
                </body>
            </method>
        </implementation>
        <content>
            <vbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" flex="1">
                <vbox>
                    <hbox>
                        <stack style="width: 150px; height: 150px; overflow: hidden;text-align:center;" flex="1">
                            <image top="5" left="5" style="margin-right: 5px; margin-bottom: 5px;" src="chrome://pencil/content/UI/Icons/color-wheel-70.png" width="140" height="140" aid="wheelImage"/>
                            <box aid="pin" left="50" top="50" width="10" height="10" tooltiptextx="Drag around the wheel to select a color"/>
                        </stack>
                        <vbox class="pwheelcolorpicker-scale-box">
                            <label value="&label.hue.value;"/>
                            <textbox type="number" min="0" max="359" size="3" increment="1" aid="hue" xbl:inherits="disabled"/>
                            <hbox>
                                <label value="&label.sat.value;"/>
                                <toolbarbutton class="ClearButton" tooltiptext="&toolbar.remove.color.tooltiptext;" aid="clearSatButton"/>
                            </hbox>
                            <textbox type="number" min="0" max="100" size="3" increment="1" aid="sat" xbl:inherits="disabled"/>
                        </vbox>
                    </hbox>
                    <hbox>
                        <label value="&label.brightness.value;"/>
                        <hbox flex="1">
                            <scale min="0" max="100" flex="1" aid="brightScale" xbl:inherits="disabled"/>
                            <vbox class="pwheelcolorpicker-scale-box">
                                <textbox type="number" min="0" max="100" size="3" increment="1" aid="bright" xbl:inherits="disabled"/>
                            </vbox>
                        </hbox>
                    </hbox>
                </vbox>

            </vbox>
        </content>
    </binding>
</bindings>
